@page "/quest4"
@using System.Net.Http.Json
@using LACrimes.Web.Blazor.Shared.Quest
@using System.Text.Json
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime

<h3>Quest 4</h3>
<h6>Find the average number of crimes occurred per hour (24 hours) for a specific date range.</h6>

<div>
    <label for="startDate">Start Date:</label>
    <input type="date" id="startDate" @bind="startDate" />

    <label for="endDate">End Date:</label>
    <input type="date" id="endDate" @bind="endDate" />

    <button @onclick="FetchReports">Get Reports</button>
</div>

@if (isLoading)
{
    <div class="spinner-border text-secondary" role="status">
    </div>
}

@if (quest4Reports != null)
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Hour</th>
                <th>Average Crimes</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var report in quest4Reports)
            {
                <tr>
                    <td>@report.Hour</td>
                    <td>@report.AverageCrimes</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private bool isLoading = false;
    private DateTime startDate = DateTime.Today;
    private DateTime endDate = DateTime.Today;
    private List<Quest4ReportDto>? quest4Reports = null;

    private async Task FetchReports()
    {
        if (startDate > endDate)
        {
            await jsRuntime.InvokeVoidAsync("alert", "Start date cannot be greater than end date");
            return;
        }

        try
        {
            isLoading = true;
            var response = await httpClient.GetFromJsonAsync<List<Quest4ReportDto>>($"api/quests/Quest4?startDate={startDate:yyyy-MM-dd}&endDate={endDate:yyyy-MM-dd}");
            isLoading = false;
            if (response is null)
            {
                await jsRuntime.InvokeVoidAsync("alert", "No data found");
                return;
            }
            quest4Reports = response;
        }
        catch (HttpRequestException ex)
        {
            await jsRuntime.InvokeVoidAsync("alert", ex.Message);
			isLoading = false;
        }
        catch (JsonException ex)
        {
            await jsRuntime.InvokeVoidAsync("alert", "No report Found");
			isLoading = false;
        }
        catch (Exception ex)
        {
            await jsRuntime.InvokeVoidAsync("alert", ex.Message);
			isLoading = false;
        }
    }
}

