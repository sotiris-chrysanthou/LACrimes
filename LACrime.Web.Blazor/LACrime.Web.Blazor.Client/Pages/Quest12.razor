@page "/quest12"
@using System.Net.Http.Json
@using System.Text.Json
@using LACrimes.Web.Blazor.Shared.Quest
@inject HttpClient Http
@inject IJSRuntime jsRuntime

<h3>Quest 12</h3>
<h6>Find the number of division of records for crimes reported on the same day in different areas using the same weapon for a specific time range.</h6>

<div>
    <label for="date">Date:</label>
    <input type="date" id="date" @bind="date" />

    <label for="startTime">Start Time:</label>
    <input type="time" id="startTime" @bind="startTime" />

    <label for="endTime">End Time:</label>
    <input type="time" id="endTime" @bind="endTime" />

    <button @onclick="GetQuest12Data">Get Report</button>
</div>

@if (isLoading)
{
    <div class="spinner-border text-secondary" role="status">
    </div>
}

@if (quest12Reports != null)
{
    <br />
    <br />
    <text>
        Number of Reports : @quest12Reports.Count()
    </text>
    <br />
    <br />
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Division of Record number</th>
            </tr>
        </thead>
		@foreach (var record in quest12Reports)
		{
			<tbody>
				<tr>
					<td>@record.DrNo</td>
				</tr>
			</tbody>
		}
    </table>
}

@code {
    private bool isLoading = false;
    private DateTime date = DateTime.Today;
    private TimeOnly startTime = TimeOnly.MinValue;
    private TimeOnly endTime = TimeOnly.MaxValue;
    private List<Quest12ReportDto>? quest12Reports;

    private async Task GetQuest12Data()
    {
        if (startTime > endTime)
        {
            await jsRuntime.InvokeVoidAsync("alert", "Start time cannot be greater than end time");
            return;
        }
        
		if (startTime == TimeOnly.MinValue || endTime == TimeOnly.MaxValue)
		{
			await jsRuntime.InvokeVoidAsync("alert", "Please enter valid date");
			return;
		}


        try
        {
            isLoading = true;
            quest12Reports = await Http.GetFromJsonAsync<List<Quest12ReportDto>>($"api/Quests/Quest12?date={date:yyyy-MM-dd}&startTime={startTime:HH:mm}&endTime={endTime:HH:mm}");
            isLoading = false;

            if (quest12Reports == null)
            {
                await jsRuntime.InvokeVoidAsync("alert", "No data found");
            }
        }
        catch (HttpRequestException ex)
        {
            await jsRuntime.InvokeVoidAsync("alert", ex.Message);
            isLoading = false;
        }
        catch (JsonException)
        {
            await jsRuntime.InvokeVoidAsync("alert", "No report found");
            isLoading = false;
        }
        catch (Exception ex)
        {
            await jsRuntime.InvokeVoidAsync("alert", ex.Message);
            isLoading = false;
        }
    }
}
