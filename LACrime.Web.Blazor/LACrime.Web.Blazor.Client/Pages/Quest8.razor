@page "/quest8"
@using System.Net.Http.Json
@using LACrimes.Web.Blazor.Shared.Quest
@using System.Globalization
@using System.Text.Json
@inject HttpClient Http
@inject IJSRuntime jsRuntime

<h3>Quest 8</h3>
<h6>Find the second most common crime that has co-occurred with a particular crime for a specific date range.</h6>

<div>
    <label for="crimeCode">Crime Code:</label>
    <input type="number" id="crimeCode" @bind="crimeCode" />

    <label for="startDate">Start Date:</label>
    <input type="date" id="startDate" @bind="startDate" />

    <label for="endDate">End Date:</label>
    <input type="date" id="endDate" @bind="endDate" />

    <button @onclick="GetQuest8Data">Get Reports</button>
</div>

@if (isLoading)
{
    <div class="spinner-border text-secondary" role="status">
    </div>
}

@if (quest8ReportDto != null)
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Crime 1 Code</th>
                <th>Crime 1 Description</th>
                <th>Crime 2 Code</th>
                <th>Crime 2 Description</th>
                <th>Crime Count</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@quest8ReportDto.Crime1Code</td>
                <td>@quest8ReportDto.Crime1Description</td>
                <td>@quest8ReportDto.Crime2Code</td>
                <td>@quest8ReportDto.Crime2Description</td>
                <td>@quest8ReportDto.CrimeCount</td>
            </tr>
        </tbody>
    </table>
}

@code {
    private bool isLoading = false;
    private int crimeCode;
    private DateTime startDate = DateTime.Today.AddMonths(-3);
    private DateTime endDate = DateTime.Today;
    private Quest8ReportDto? quest8ReportDto;

    private async Task GetQuest8Data()
    {

		if (startDate > endDate)
		{
			await jsRuntime.InvokeVoidAsync("alert", "Start date cannot be greater than end date");
			return;
		}

		try
		{
			isLoading = true;
			object? response = await Http.GetFromJsonAsync<Quest8ReportDto>($"api/Quests/Quest8?code={crimeCode}&startDate={startDate:yyyy-MM-dd}&endDate={endDate:yyyy-MM-dd}");
			isLoading = false;
			if (response is null)
			{
				await jsRuntime.InvokeVoidAsync("alert", "No data found");
				return;
			}
			quest8ReportDto = (Quest8ReportDto)response;
		}catch (HttpRequestException ex){
            await jsRuntime.InvokeVoidAsync("alert", ex.Message);
			isLoading = false;
        }
        catch (JsonException ex)
        {
            await jsRuntime.InvokeVoidAsync("alert", "No report Found");
			isLoading = false;
        }
        catch (Exception ex)
        {
            await jsRuntime.InvokeVoidAsync("alert", ex.Message);
			isLoading = false;
        }
    }
}
