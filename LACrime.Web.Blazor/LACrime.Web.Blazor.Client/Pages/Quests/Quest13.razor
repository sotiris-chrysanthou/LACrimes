@page "/quest13"
@using System.Net.Http.Json
@using LACrimes.Web.Blazor.Client.Extensions
@using LACrimes.Web.Blazor.Shared.Quest
@using System.Text.Json
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Net.Http.Headers
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@inject AuthenticationStateProvider authStateProvider
@attribute [Authorize(Roles = "User,Admin")]

<h3>Quest 13</h3>
<h6>
	Find the crimes that occurred for a given number of times N on the same day, in the same
	area, using the same weapon, for a specific time range. Return the list of division of records
	numbers, the area name, the crime code description and the weapon description.
</h6>
@if (isLoggingIn)
{
	<div class="spinner-border text-secondary" role="status"></div>
}
else
{

	<div>
		<label for="startDate">Start date:</label>
		<input type="datetime-local" id="startDate" @bind="startDate" />

		<label for="endDate">End date:</label>
		<input type="datetime-local" id="endDate" @bind="endDate" />

		<label for="N">Number of occurrence (N):</label>
		<input type="number" id="N" @bind="N" min="1" />
		<button class="btn btn-primary" @onclick="GetQuest13Data">Get Report</button>
	</div>

	if (isLoading)
	{
		<div class="spinner-border text-secondary" role="status">
			<span class="visually-hidden">Loading...</span>
		</div>
	}

	if (quest13Reports != null)
	{
		<br />
		<text>
			Number of Reports : @quest13Reports.Count()
		</text>
		<br />
		<br />
		<table class="table table-bordered">
			<thead>
				<tr>
					<th>Date</th>
					<th>Area Name</th>
					<th>Weapon Code</th>
					<th>Weapon Description</th>
					<th>Crime Code</th>
					<th>Crime Description</th>
					<th>List Of DrNo</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var report in quest13Reports)
				{
					<tr>
						<td>@report.CrimeDate.ToString("yyyy-MM-dd")</td>
						<td>@report.AreaName</td>
						<td>@report.WeaponCode</td>
						<td>@report.WeaponDesc</td>
						<td>@report.CrimeCode</td>
						<td>@report.CrimeDesc</td>
						<td>@report.ListOfDrNo</td>
					</tr>
				}
			</tbody>
		</table>
	}
	else if (quest13Reports != null && !quest13Reports.Any())
	{
		<div class="alert alert-info mt-4" role="alert">
			No data found for the specified criteria.
		</div>
	}
}

@code {
	private bool isLoading = false;
	private bool isLoggingIn = true;
	private DateTime startDate = DateTime.Today.AddDays(-30);
	private DateTime endDate = DateTime.Today;
	private int N = 1;
	private List<Quest13ReportDto>? quest13Reports;

	protected override async Task OnInitializedAsync()
	{
		var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
		var token = await customAuthStateProvider.GetToken();
		if (!String.IsNullOrWhiteSpace(token))
		{
			httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
			isLoggingIn = false;
		}
		else
		{
			await jsRuntime.InvokeVoidAsync("alert", "Please login first");
			navigationManager.NavigateTo("/login", true);
		}
	}

	private async Task GetQuest13Data()
	{
		if (startDate > endDate)
		{
			await jsRuntime.InvokeVoidAsync("alert", "The start date cannot be after the end date.");
			return;
		}

		if (N < 1)
		{
			await jsRuntime.InvokeVoidAsync("alert", "The number of occurrences N must be at least 1.");
			return;
		}

		try
		{
			isLoading = true;
			quest13Reports = null;

			var response = await httpClient.GetAsync($"api/Quests/Quest13?startDate={startDate:yyyy-MM-dd HH:mm}&endDate={endDate:yyyy-MM-dd HH:mm}&N={N}");

			isLoading = false;

			if (response.IsSuccessStatusCode)
			{
				quest13Reports = await response.Content.ReadFromJsonAsync<List<Quest13ReportDto>>();
			}
			else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
			{
				quest13Reports = new List<Quest13ReportDto>();
			}
			else
			{
				var errorMessage = await response.Content.ReadAsStringAsync();
				await jsRuntime.InvokeVoidAsync("alert", $"Error: {errorMessage}");
			}
		}
		catch (HttpRequestException ex)
		{
			await jsRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
			isLoading = false;
		}
		catch (Exception ex)
		{
			await jsRuntime.InvokeVoidAsync("alert", $"Unexpected Error: {ex.Message}");
			isLoading = false;
		}
	}
}
