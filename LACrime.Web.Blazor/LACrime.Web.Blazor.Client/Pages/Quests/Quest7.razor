@page "/quest7"
@using System.Net.Http.Json
@using LACrimes.Web.Blazor.Client.Extensions
@using LACrimes.Web.Blazor.Shared.Quest
@using System.Globalization
@using System.Text.Json
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Net.Http.Headers
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@inject AuthenticationStateProvider authStateProvider
@attribute [Authorize(Roles = "User,Admin")]

<h3>Quest 7</h3>
<h6>Find the pair of crimes that has co-occurred in the area with the most reported incidents for a specific date range.</h6>
@if (isLoggingIn)
{
	<div class="spinner-border text-secondary" role="status"></div>
}
else
{
	<div>
		<label for="startDate">Start Date:</label>
		<input type="date" id="startDate" @bind="startDate" />

		<label for="endDate">End Date:</label>
		<input type="date" id="endDate" @bind="endDate" />

		<button @onclick="GetQuest7Data">Get Reports</button>
	</div>

	if (isLoading)
	{
		<div class="spinner-border text-secondary" role="status">
		</div>
	}

	if (quest7ReportDto != null)
	{
		<table class="table table-bordered">
			<thead>
				<tr>
					<th>Area Name</th>
					<th>Crime Code 1</th>
					<th>Crime 1 Description</th>
					<th>Crime Code 2</th>
					<th>Crime 2 Description</th>
					<th>Co-Occurrences</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>@quest7ReportDto.AreaName</td>
					<td>@quest7ReportDto.CrimeCode1</td>
					<td>@quest7ReportDto.Crime1Desc</td>
					<td>@quest7ReportDto.CrimeCode2</td>
					<td>@quest7ReportDto.Crime2Desc</td>
					<td>@quest7ReportDto.CoOccurrences</td>
				</tr>
			</tbody>
		</table>
	}
}

@code {
	private bool isLoading = false;
	private bool isLoggingIn = true;
	private DateTime startDate = DateTime.Today.AddMonths(-3);
	private DateTime endDate = DateTime.Today;
	private Quest7ReportDto? quest7ReportDto;

	protected override async Task OnInitializedAsync()
	{
		var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
		var token = await customAuthStateProvider.GetToken();
		if (!String.IsNullOrWhiteSpace(token))
		{
			httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
			isLoggingIn = false;
		}
		else
		{
			await jsRuntime.InvokeVoidAsync("alert", "Please login first");
			navigationManager.NavigateTo("/login", true);
		}
	}

	private async Task GetQuest7Data()
	{

		if (startDate > endDate)
		{
			await jsRuntime.InvokeVoidAsync("alert", "Start date cannot be greater than end date");
			return;
		}

		try
		{
			isLoading = true;
			var response = await httpClient.GetFromJsonAsync<Quest7ReportDto>($"api/Quests/Quest7?startDate={startDate:yyyy-MM-dd}&endDate={endDate:yyyy-MM-dd}");
			isLoading = false;
			if (response is null)
			{
				await jsRuntime.InvokeVoidAsync("alert", "No data found");
				return;
			}
			quest7ReportDto = response;
		}
		catch (HttpRequestException ex)
		{
			await jsRuntime.InvokeVoidAsync("alert", ex.Message);
			isLoading = false;
		}
		catch (JsonException)
		{
			await jsRuntime.InvokeVoidAsync("alert", "No report Found");
			isLoading = false;
		}
		catch (Exception ex)
		{
			await jsRuntime.InvokeVoidAsync("alert", ex.Message);
			isLoading = false;
		}
	}
}
