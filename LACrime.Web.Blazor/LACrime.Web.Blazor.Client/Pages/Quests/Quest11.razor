@page "/quest11"
@using System.Net.Http.Json
@using System.Text.Json
@using LACrimes.Web.Blazor.Client.Extensions
@using LACrimes.Web.Blazor.Shared.Quest
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Net.Http.Headers
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@inject AuthenticationStateProvider authStateProvider
@attribute [Authorize(Roles = "User,Admin")]

<h3>Quest 11</h3>
<h6>Find all areas that have received more than 1 report on each of these 2 crimes on the same day.</h6>
@if (isLoggingIn)
{
	<div class="spinner-border text-secondary" role="status"></div>
}
else
{
	<div>
		<label for="crimeCode1">Crime Code 1:</label>
		<input type="number" id="crimeCode1" @bind="crimeCode1" />

		<label for="crimeCode2">Crime Code 2:</label>
		<input type="number" id="crimeCode2" @bind="crimeCode2" />

		<button @onclick="GetQuest11Data">Get Report</button>
	</div>

	if (isLoading)
	{
		<div class="spinner-border text-secondary" role="status">
		</div>
	}

	if (quest11Reports != null)
	{
		<br />
		<br />
		<text>
			Number of Reports : @quest11Reports.Count()
		</text>
		<br />
		<br />
		<table class="table table-bordered">
			<thead>
				<tr>
					<th>Area Name</th>
					<th>Crime Date</th>
					<th>Crime 1 Code</th>
					<th>Crime 2 Code</th>
					<th>Crimes Count</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var item in quest11Reports)
				{
					<tr>
						<td>@item.AreaName</td>
						<td>@item.CrimeDate.ToShortDateString()</td>
						<td>@item.Crime1Code</td>
						<td>@item.Crime2Code</td>
						<td>@item.CrimesCount</td>
					</tr>
				}
			</tbody>
		</table>
	}
}
@code {
	private bool isLoading = false;
	private bool isLoggingIn = true;
	private int crimeCode1;
	private int crimeCode2;
	private List<Quest11ReportDto>? quest11Reports;

	protected override async Task OnInitializedAsync()
	{
		var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
		var token = await customAuthStateProvider.GetToken();
		if (!String.IsNullOrWhiteSpace(token))
		{
			httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
			isLoggingIn = false;
		}
		else
		{
			await jsRuntime.InvokeVoidAsync("alert", "Please login first");
			navigationManager.NavigateTo("/login", true);
		}
	}

	private async Task GetQuest11Data()
	{
		if (crimeCode1 <= 0 || crimeCode2 <= 0)
		{
			await jsRuntime.InvokeVoidAsync("alert", "Please enter valid Crime Codes");
			return;
		}

		try
		{
			isLoading = true;
			var response = await httpClient.GetFromJsonAsync<List<Quest11ReportDto>>($"api/Quests/Quest11?crimeCode1={crimeCode1}&crimeCode2={crimeCode2}");
			isLoading = false;

			if (response == null || !response.Any())
			{
				await jsRuntime.InvokeVoidAsync("alert", "No data found");
			}
			quest11Reports = response;
		}
		catch (HttpRequestException ex)
		{
			await jsRuntime.InvokeVoidAsync("alert", ex.Message);
			isLoading = false;
		}
		catch (JsonException)
		{
			await jsRuntime.InvokeVoidAsync("alert", "No report found");
			isLoading = false;
		}
		catch (Exception ex)
		{
			await jsRuntime.InvokeVoidAsync("alert", ex.Message);
			isLoading = false;
		}
	}
}
