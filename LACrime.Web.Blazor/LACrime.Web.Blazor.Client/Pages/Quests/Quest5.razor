@page "/quest5"
@using System.Net.Http.Json
@using LACrimes.Web.Blazor.Client.Extensions
@using LACrimes.Web.Blazor.Shared.Quest
@using System.Globalization
@using System.Text.Json
@using Microsoft.AspNetCore.Authorization
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authStateProvider
@attribute [Authorize(Roles = "User,Admin")]

<h3>Quest 5</h3>
<h6>Find the most common “Crm Cd” in a specified bounding box (as designated by GPS coordinates) for a specific day.</h6>
@if (isLoggingIn)
{
	<div class="spinner-border text-secondary" role="status"></div>
}
else
{
	<div>
		<label for="date">Date:</label>
		<input type="date" id="date" @bind="date" />

		<label for="minLat">Min Latitude:</label>
		<input type="number" id="minLat" @bind="minLat" step="any" />

		<label for="maxLat">Max Latitude:</label>
		<input type="number" id="maxLat" @bind="maxLat" step="any" />

		<label for="minLon">Min Longitude:</label>
		<input type="number" id="minLon" @bind="minLon" step="any" />

		<label for="maxLon">Max Longitude:</label>
		<input type="number" id="maxLon" @bind="maxLon" step="any" />

		<button @onclick="GetQuest5Data">Get Reports</button>
	</div>

	if (isLoading)
	{
		<div class="spinner-border text-secondary" role="status">
		</div>
	}

	if (quest5ReportDto != null)
	{
		<table class="table table-bordered">
			<thead>
				<tr>
					<th>Crime Code</th>
					<th>Total Reports</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>@quest5ReportDto.CrmCd</td>
					<td>@quest5ReportDto.TotalReports</td>
				</tr>
			</tbody>
		</table>
	}
}
@code {
	private bool isLoading = false;
	private bool isLoggingIn = true;
	private DateTime date = DateTime.Today;
	private double minLat;
	private double maxLat;
	private double minLon;
	private double maxLon;
	private Quest5ReportDto? quest5ReportDto;

	protected override async Task OnInitializedAsync()
	{
		var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
		var token = await customAuthStateProvider.GetToken();
		if (!String.IsNullOrWhiteSpace(token))
		{
			Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
			isLoggingIn = false;
		}
		else
		{
			await jsRuntime.InvokeVoidAsync("alert", "Please login first");
			navigationManager.NavigateTo("/login", true);
		}
	}

	private async Task GetQuest5Data()
	{
		if (date == DateTime.MinValue)
		{
			await jsRuntime.InvokeVoidAsync("alert", "Please select a date");
			return;
		}

		if (minLat >= maxLat)
		{
			await jsRuntime.InvokeVoidAsync("alert", "Min Latitude must be less than Max Latitude");
			return;
		}
		if (minLon >= maxLon)
		{
			await jsRuntime.InvokeVoidAsync("alert", "Min Longitude must be less than Max Longitude");
			return;
		}

		try
		{
			isLoading = true;
			var response = await Http.GetFromJsonAsync<Quest5ReportDto>($"api/Quests/Quest5?date={date:yyyy-MM-dd}&minLat={minLat.ToString(CultureInfo.InvariantCulture)}&maxLat={maxLat.ToString(CultureInfo.InvariantCulture)}&minLon={minLon.ToString(CultureInfo.InvariantCulture)}&maxLon={maxLon.ToString(CultureInfo.InvariantCulture)}");
			isLoading = false;
			if (response is null)
			{
				await jsRuntime.InvokeVoidAsync("alert", "No data found");
				return;
			}
			quest5ReportDto = response;
		}
		catch (HttpRequestException ex)
		{
			await jsRuntime.InvokeVoidAsync("alert", ex.Message);
			isLoading = false;
		}
		catch (JsonException)
		{
			await jsRuntime.InvokeVoidAsync("alert", "No report Found");
			isLoading = false;
		}
		catch (Exception ex)
		{
			await jsRuntime.InvokeVoidAsync("alert", ex.Message);
			isLoading = false;
		}

	}
}
