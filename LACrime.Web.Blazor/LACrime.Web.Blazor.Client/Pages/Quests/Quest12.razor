@page "/quest12"
@using System.Net.Http.Json
@using System.Text.Json
@using LACrimes.Web.Blazor.Client.Extensions
@using LACrimes.Web.Blazor.Shared.Quest
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@inject AuthenticationStateProvider authStateProvider
@attribute [Authorize(Roles = "User,Admin")]

<h3>Quest 12</h3>
<h6>Find the number of division of records for crimes reported on the same day in different areas using the same weapon for a specific time range.</h6>
@if (isLoggingIn)
{
	<div class="spinner-border text-secondary" role="status"></div>
}
else
{
<div>
    <label for="startTime">Start date and time:</label>
    <input type="datetime-local" id="startTime" @bind="startDate" />

    <label for="endTime">End date and time:</label>
    <input type="datetime-local" id="endTime" @bind="endDate" />

    <button @onclick="GetQuest12Data">Get Report</button>
</div>

if (isLoading)
{
    <div class="spinner-border text-secondary" role="status">
    </div>
}

if (quest12Reports != null)
{
    <br />
    <br />
    <text>
        Number of Reports : @quest12Reports.Count()
    </text>
    <br />
    <br />
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Division of Record number</th>
            </tr>
        </thead>
		@foreach (var record in quest12Reports)
		{
			<tbody>
				<tr>
					<td>@record.DrNo</td>
				</tr>
			</tbody>
		}
    </table>
}
}
@code {
    private bool isLoading = false;
    private bool isLoggingIn = true;
    private DateTime startDate = DateTime.Now;
    private DateTime endDate = DateTime.Now.AddDays(-2);
    private List<Quest12ReportDto>? quest12Reports;

    protected override async Task OnInitializedAsync()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        var token = await customAuthStateProvider.GetToken();
        if (!String.IsNullOrWhiteSpace(token))
        {
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
            isLoading = false;
        }
        else
        {
            await jsRuntime.InvokeVoidAsync("alert", "Please login first");
            navigationManager.NavigateTo("/login", true);
        }
    }

    private async Task GetQuest12Data()
    {
        if (startDate > endDate)
        {
            await jsRuntime.InvokeVoidAsync("alert", "Start date cannot be greater than end date");
            return;
        }
        
        if (startDate == DateTime.MinValue || startDate == DateTime.MaxValue)
		{
			await jsRuntime.InvokeVoidAsync("alert", "Please enter valid start date");
			return;
		}

		if (endDate == DateTime.MinValue || endDate == DateTime.MaxValue){
            await jsRuntime.InvokeVoidAsync("alert", "Please enter valid end date");
            return;
        }


        try
        {
            isLoading = true;
            var response = await httpClient.GetFromJsonAsync<List<Quest12ReportDto>>($"api/Quests/Quest12?startDate={startDate:yyyy-MM-dd HH:mm}&endDate={endDate:yyyy-MM-dd HH:mm}");
            isLoading = false;

            if (response == null)
            {
                await jsRuntime.InvokeVoidAsync("alert", "No data found");
            }
			quest12Reports = response;
        }
        catch (HttpRequestException ex)
        {
            await jsRuntime.InvokeVoidAsync("alert", ex.Message);
            isLoading = false;
        }
        catch (JsonException)
        {
            await jsRuntime.InvokeVoidAsync("alert", "No report found");
            isLoading = false;
        }
        catch (Exception ex)
        {
            await jsRuntime.InvokeVoidAsync("alert", ex.Message);
            isLoading = false;
        }
    }
}
