@page "/Quest1"
@using BlazorBootstrap
@using LACrimes.Web.Blazor.Client.Extensions
@using LACrimes.Web.Blazor.Shared
@using LACrimes.Web.Blazor.Shared.Quest
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authStateProvider
@rendermode InteractiveAuto
@attribute [Authorize(Roles = "User,Admin")]

<h3>Quest 1</h3>

<h6>Find the total number of reports per “Crm Cd” that occurred within a specified time range and sort them in a descending order.</h6>
@if (isLoggingIn)
{
	<div class="spinner-border text-secondary" role="status"></div>
}
else
{
	<div>
		<label for="startDate">Start Date:</label>
		<input type="date" id="startDate" @bind="startDate" />

		<label for="endDate">End Date:</label>
		<input type="date" id="endDate" @bind="endDate" />

		<button @onclick="FetchReports">Get Reports</button>
	</div>

	if (isLoading)
	{
		<div class="spinner-border text-secondary" role="status"></div>
	}

	if (quest1Reports != null)
	{
		<br />
		<br />
		<text>
			Number of Reports : @quest1Reports.Count()
		</text>
		<br />
		<br />
		<table class="table table-bordered">
			<thead>
				<tr>
					<th>Crime Code</th>
					<th>Crime Description</th>
					<th>Total Reports</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var report in quest1Reports)
				{
					<tr>
						<td>@report.CrmCd</td>
						<td>@report.CrimeDescription</td>
						<td>@report.TotalReports</td>
					</tr>
				}
			</tbody>
		</table>
	}
}

@code {
	private bool isLoading = true;
	private bool isLoggingIn = true;
	private DateTime startDate = DateTime.Today;
	private DateTime endDate = DateTime.Today;
	private List<Quest1ReportDto>? quest1Reports = null;

	protected override async Task OnInitializedAsync()
	{
		var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
		var token = await customAuthStateProvider.GetToken();
		if (!String.IsNullOrWhiteSpace(token))
		{
			httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", token);
			isLoggingIn = false;
		}
		else
		{
			await jsRuntime.InvokeVoidAsync("alert", "Please login first");
			navigationManager.NavigateTo("/login", true);
		}
	}

	private async Task FetchReports()
	{
		if (startDate > endDate)
		{
			await jsRuntime.InvokeVoidAsync("alert", "Start date cannot be greater than end date");
			return;
		}

		try
		{
			isLoading = true;
			var apiUrl = $"api/quests/Quest1?startDate={startDate:yyyy-MM-dd}&endDate={endDate:yyyy-MM-dd}";
			var response = await httpClient.GetFromJsonAsync<List<Quest1ReportDto>>(apiUrl);
			isLoading = false;
			if (response is null || !response.Any())
			{
				await jsRuntime.InvokeVoidAsync("alert", "No data found");
				return;
			}
			quest1Reports = response.OrderByDescending(r => r.TotalReports).ToList();
		}
		catch (HttpRequestException ex)
		{
			await jsRuntime.InvokeVoidAsync("alert", ex.Message);
			isLoading = false;
		}
		catch (JsonException)
		{
			await jsRuntime.InvokeVoidAsync("alert", "No report Found");
			isLoading = false;
		}
		catch (Exception ex)
		{
			await jsRuntime.InvokeVoidAsync("alert", ex.Message);
			isLoading = false;
		}
	}
}
