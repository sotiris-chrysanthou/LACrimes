@page "/quest3"
@using System.Net.Http.Json
@using LACrimes.Web.Blazor.Shared.Quest
@using System.Text.Json
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime

<h3>Quest3</h3>
<h6>
    Find the most common crime committed regardless of code 1, 2, 3, and 4, per area for a specific day.
</h6>


<div>
    <label>Date:</label>
    <input type="date" @bind="date" />
</div>
<button @onclick="GetMostCommonCrime">Get Most Common Crime</button>

@if (isLoading)
{
    <div class="spinner-border text-secondary" role="status">
    </div>
}
@if (quest3Reports != null)
{
    <br />
    <br />
    <text>
        Number of Reports : @quest3Reports.Count()
    </text>
    <br />
    <br />
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Area Code</th>
                <th>Area Name</th>
                <th>Crime Code</th>
                <th>Crime Description</th>
                <th>Total Reports</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var crime in quest3Reports)
            {
                <tr>
                    <td>@crime.AreaCode</td>
                    <td>@crime.AreaName</td>
                    <td>@crime.CrimeCode</td>
                    <td>@crime.CrimeDescription</td>
                    <td>@crime.TotalReports</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private bool isLoading = false;
    private DateTime date = DateTime.Today;
    private List<Quest3ReportDto>? quest3Reports = null;

    private async Task GetMostCommonCrime()
    {
		if (date == DateTime.MinValue)
		{
			await jsRuntime.InvokeVoidAsync("alert", "Please select a date");
			return;
		}

        try
        {
            isLoading = true;
            var response = await httpClient.GetFromJsonAsync<List<Quest3ReportDto>>($"api/quests/Quest3?date={date:yyyy-MM-dd}");
            isLoading = false;
            if (response is null)
            {
                await jsRuntime.InvokeVoidAsync("alert", "No data found");
                return;
            }
            quest3Reports = response;
        }
        catch (HttpRequestException ex)
        {
            await jsRuntime.InvokeVoidAsync("alert", ex.Message);
			isLoading = false;
        }
        catch (JsonException ex)
        {
            await jsRuntime.InvokeVoidAsync("alert", "No report Found");
			isLoading = false;
        }
        catch (Exception ex)
        {
            await jsRuntime.InvokeVoidAsync("alert", ex.Message);
			isLoading = false;
        }
    }
}
