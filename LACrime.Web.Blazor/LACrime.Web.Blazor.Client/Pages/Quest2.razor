@page "/quest2"
@using System.Net.Http.Json
@using LACrimes.Web.Blazor.Shared.Quest
@using System.Text.Json
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

<h3>Quest2</h3>

<h6>Find the total number of reports per day for a specific “Crm Cd” and time range.</h6>


<div>
	<label>Crm Cd:</label>
	<input @bind="crmCd" type="number" />
</div>
<div>
	<label>Start Date:</label>
	<input type="date" @bind="startDate" />
</div>
<div>
	<label>End Date:</label>
	<input type="date" @bind="endDate" />
</div>
<button @onclick="GetCrimeReports">Get Reports</button>
@if (isLoading)
{
	<div class="spinner-border text-secondary" role="status">
	</div>
}
@if (quest2Reports != null)
{
	<br />
	<br />
	<text>
		Number of Reports : @quest2Reports.Count()
	</text>
	<br />
	<br />
	<table class="table table-bordered">
		<thead>
			<tr>
				<th>Date</th>
				<th>Total Reports</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var report in quest2Reports)
			{
				<tr>
					<td>@report.ReportDate.ToShortDateString()</td>
					<td>@report.TotalReports</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	private bool isLoading = false;
	private int crmCd;
	private DateTime startDate = DateTime.Today;
	private DateTime endDate = DateTime.Today;
	private List<Quest2ReportDto>? quest2Reports = null;

	private async Task GetCrimeReports()
	{
		if (startDate > endDate)
		{
			await jsRuntime.InvokeVoidAsync("alert", "Start date cannot be greater than end date");
			return;
		}

		try {
			isLoading = true;
			var response = await httpClient.GetFromJsonAsync<List<Quest2ReportDto>>($"api/quests/Quest2?crmCd={crmCd}&startDate={startDate:yyyy-MM-dd}&endDate={endDate:yyyy-MM-dd}");
			isLoading = false;
			if (response is null)
			{
				await jsRuntime.InvokeVoidAsync("alert", "No data found");
				return;
			}
			quest2Reports = response;
		}
		catch (HttpRequestException ex)
		{
			await jsRuntime.InvokeVoidAsync("alert", "Error: " + ex.Message);
			isLoading = false;
		}
		catch (JsonException ex)
		{
			await jsRuntime.InvokeVoidAsync("alert", "No report Found");
			isLoading = false;
		}
		catch (Exception ex)
		{
			await jsRuntime.InvokeVoidAsync("alert", ex.Message);
			isLoading = false;
		}
	}
}
